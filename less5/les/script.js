/* Обьекты ООП
*
* const название = {
    make : 'audi',
    year : 2023,
    Ключ : значение,
}
* console.log(название.make)
*
*
*
* */

// const car = {
//     make : 'audi',
//     year : 2023,
// }
// console.log(car)
//
// let yearCar = +car.year;
// console.log(yearCar);
//
// car.color = 'red';
// console.log(car);
//
// delete car.year
// console.log(car);

// const product = {
//     name: 'Стол',
//     price: 1000,
//     count: 2,
//     buy: function () {
//         if (this.count > 0) {
//             console.log('Вы купили');
//         } else {
//             console.log('Товара нет');
//         }
//     },
//     userRegistred: false,
//     reg: function () {
//         this.userRegistred = true
//     },
//     buyProduct: function () {
//         if (this.userRegist) {
//             console.log('Товар в корзине')
//         } else {
//             console.log('Зарегестрируйтесь')
//         }
//     },
// }

// product.buyProduct();
// product.reg();
// product.buy();
// console.log(product)


// for (const key in product) {
//     console.log(product[key]);
// }


// console.log(Object.keys(product)); // вернет массив из ключей
// console.log(Object.values(product)); // вернет массив из значений
// console.log(Object.entries(product)); // выведет все в массиве

/* map
map — один из самых используемых методов при работе с массивом. Он позволяет проитерировать весь
массив и создать на его основе новый.

map с английского — карта. Метод позволяет сделать « карту соответствия»
исходного массива и нового. Принимает аргумент-функцию, в которую при работе
передаются аргументы:
    ➜ текущий элемент массива,
    ➜ его индекс,
    ➜ полный массив.
Функция-аргумент должна сделать необходимые вычисления и вернуть новые
элементы, из которых будет построен новый массив.


filter
Метод filter используется для фильтрации элементов массива по правилу,
которое задаёте вы сами. Позволяет исключить из исходного массива лишние
элементы и получить новый массив.
Как и map, метод filter получает в качестве аргумента функцию обратного
вызова с теми же аргументами. Только эта функция возвращает false, если
элемент нужно исключить, и true, чтобы он попал в новый массив

reduce
Метод reduce не так просто понять с первого раза. Его называют свёрткой, так
как он проходится по всему массиву и позволяет собрать и обработать его
значения в новую форму.
например, в одно значение (допустим сумму значений всех элементов).
Чтобы лучше понять этот метод, посмотрим на алгоритм без reduce, а потом
оптимизируем его с помощью reduce.


some
Метод some используется, когда нужно проверить, что в массиве есть хоть один
подходящий нам элемент. Например, есть ли среди всех студентов хоть кто-то,
кто прошел практику.
Принимает функцию обратного вызова, которая вызывается для каждого
элемента массива с аргументами:
➜ текущий элемент массива,
➜ его индекс,
➜ весь исходный массив;
Функция должна проверить условие и вернуть true, если элемент подходит, и
false, если не подходит. Когда будет найден первый подходящий элемент,
выполнение метода some прекратится, он вернёт true. Иначе метод пройдёт по
всем элементам массива и вернёт false. Если исходный массив пустой, метод
сразу вернёт false.
 */

// const array = [1, 7, 3, 10, 5, 43, 65, 9];
// const arrayMap = array.map(item => item * 2);
// console.log(array);
// console.log(arrayUp);

// const arrayFilter = array.filter(item => item >= 10); // выведет массив этих чисел [10, 43, 65]
// console.log(arrayFilter)
//
// const arraySome = array.some(item => item >= 10); // только проверит и выведет если есть true
// console.log(arraySome);

// const arrayReduce = array.reduce((a, b) => a + b); // сложить или перемножить элементы
// console.log(arrayReduce);


// Деструктуризация





















